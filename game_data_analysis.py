# -*- coding: utf-8 -*-
"""Game_data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QMmzMN5PvRIMkjj8lIvhku32LfOBx9o8
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

df1=pd.read_csv('data_640_validated.csv')

df1.head()

df1.info()

df1['What is your nationality?'].unique()

df1['What is your nationality?'] = df1['What is your nationality?'].str.strip().str.title()

# Standardize country names
country_mapping = {
    'Usa': 'United States',
    'U.S.': 'United States',
    'The United States': 'United States',
    'American':'United States',
    'American (US)': 'United States',
    'American (USA)':'United States',
    'United States of American': 'United States',
    'US citizen':'United States',
    'White American ': 'United States',
    'United States ':'United States',
    'usa':'United States',
    'United States of America':'United States',
    'American (United States of America) ':'United States',
    'American (United States)':'United States',
    'American (U.S.A.)':'United States',
    'American':'United States',
    'american':'United States',
    'USA':'United States',
    'U.S.':'United States',
    'Citizen of the United States':'United States',
    'us':'United States',
    'Vietnam':'Vietnamese',
    'canadian':'Canadian',
    'White British': 'British',
    'Viet nam':'Vietnamese',
    'British / Filipino, I am a dual citizen ': 'Mixed',
    'White English ': 'British',
    'British - White ':'British',
    'Anerican': 'United States',
    'Viet Nam': 'Vietnamese',
    'German, Native American ': 'Mixed',
    'Vieynam': 'Vietnamese',
    'English':'British',
    'Mixed nationalities':'Mixed',
    'FILIPINO':'Filipino',
    'filipino':'Filipino',
    'Filipino-American': 'Mixed',
    'American (Usa)':'United States',
    'White':'British',
    'Citizen Of The United States':'United States',
    'Us':'United States',
    'British / Filipino, I Am A Dual Citizen':'Mixed',
    'America':'United States',
    'White English':'British',
    'British - White':'British',
    'China':'Chinese',
    'American (United States Of America)':'United States',
    'Us Citizen':'United States',
    'Indonesia':'Indonesian',
    'United States Of America':'United States',
    'Uk':'British',
    'British/English':'British',
    'American (Usa)':'United States',
    'American (Us)':'United States',
    'United States Of American':'United States',
    'Philippines':'Filipino',
    'Mexican American':'Mixed',
    'Polish-American':'Mixed',
    'Portuguese-Canadian':'Mixed',
    'Vietnamese-American':'Mixed',
    'British/Filipino':'Mixed',
    'German, Native American':'Mixed',
    'Filipino American':'Mixed',
    'African American':'Mixed',
    'Mixed Race':'Mixed',
    'Ashenkazi Jewish':'Mixed',
    'Korean/ American':'Mixed',
    'Mixed Nationalities':'Mixed',
    'White American':'United States',
    'English, Irish, German':'Mixed',
    'Welsh, British':'Mixed',
    'New Zealand European':'Mixed',
    'Cornish':'British',
    'Autsralian':'Australian',
    'Candadian':'Canadian'
}

df1['What is your nationality?'] = df1['What is your nationality?'].replace(country_mapping)

# Display unique values after cleaning
print(df1['What is your nationality?'].unique())

#TO REMOVE CAUCASIAN, FRIENDLY, 29,

#DISTRIBUTION OF AGE OF PLAYERS


sns.set(style="whitegrid")

plt.figure(figsize=(25, 8))
sns.histplot(df1['What is your age?'], kde=False, color='skyblue', edgecolor='black')

plt.title('Age Distribution of Players')
plt.xlabel('Age')
plt.ylabel('Count')

plt.show()

df1['What is your age?'].unique()

filtered_df = df1[(df1['What is your age?'] == 'sub 28') | (df1['What is your age?'] == '30s')]
display(filtered_df)

a = sum(range(30,40))/10
print(a)

#QUALITY ISSUE IN LAST TWO ROWS AS SEEN IN THE GRAPH ABOVE
#REPLACING THE INCORRECT VALUES WITH CLOSEST VALUE

df1['What is your age?'][638]=35
df1['What is your age?'][639]=28

"""The 'sub 28' values in the data do not have a specific value after 'sub', and it's expected that these represent age subtracted from 28, so we will make an assumption or choose a default value for the missing part and we could assume that the missing part is zero.

For the '30s' we are taking the range from 30 to 40 and taking the mean of it as the age assigned to the user where the age is mentioned as '30s'.
"""

df1['What is your age?']

#CHANGING DATA TYPE TO NUMERIC FOR GRAPH
df1['What is your age?'] = pd.to_numeric(df1['What is your age?'], errors='coerce')

#PLOTTING DISTRIBUTION AGAIN WITH CORRECT VALUES AND DTYPE

sns.set(style="whitegrid")

#histogram
plt.figure(figsize=(10, 6))
sns.histplot(df1['What is your age?'], bins=18, kde=False, color='skyblue', edgecolor='black')


plt.title('Age Distribution of Clients')
plt.xlabel('Age')
plt.ylabel('Count')

plt.show()

#STANDARDISING VALUES IN ENVIRONMENTAL PRECEPTION THAT ARE REVERSE SCALED

columns_to_replace = ['How much do you agree with the following statements? [Humans have the right to modify the natural environment to suit their needs.]'
                      , 'How much do you agree with the following statements? [Human ingenuity will insure that we do not make the Earth unlivable]'
                      , 'How much do you agree with the following statements? [The Earth has plenty of natural resources if we just learn how to develop them.]'
                      ,'How much do you agree with the following statements? [The balance of nature is strong enough to cope with the impacts of modern industrial nations]'
                      , 'How much do you agree with the following statements? [The so-called Тecological crisisУ facing humankind has been greatly exaggerated.]'
                      , 'How much do you agree with the following statements? [Humans were meant to rule over the rest of nature.]'
                      , 'How much do you agree with the following statements? [Humans will eventually learn enough about how nature works to be able to control it.]']
replacement_values = {1: 5, 5: 1, 2:4,4:2}

for column in columns_to_replace:
    df1[column] = df1[column].replace(replacement_values)

df1[columns_to_replace]

#RELATIONSHIP BETWEEN GENDER AND ENVIRONMENTAL PERCEPTION

sns.set(style="whitegrid")

# Loop through each question and create pie charts for male and female responses
for question in ['How much do you agree with the following statements? [We are approaching the limit of the number of people the earth can support]'
                 ,'How much do you agree with the following statements? [When humans interfere with nature it often produces disastrous consequences.]'
                 , 'How much do you agree with the following statements? [Humans are seriously abusing the environment.]'
                 , 'How much do you agree with the following statements? [Plants and animals have as much right as humans to exist.]'
                 , 'How much do you agree with the following statements? [Despite our special abilities, humans are still subject to the laws of nature.]'
                 , 'How much do you agree with the following statements? [The Earth is like a spaceship with very limited room and resources.]'
                 ,'How much do you agree with the following statements? [The balance of nature is very delicate and easily upset.]'
                 , 'How much do you agree with the following statements? [If things continue on their present course, we will soon experience a major ecological catastrophe.]'
                 , 'How much do you agree with the following statements? [Humans have the right to modify the natural environment to suit their needs.]'
                      , 'How much do you agree with the following statements? [Human ingenuity will insure that we do not make the Earth unlivable]'
                      , 'How much do you agree with the following statements? [The Earth has plenty of natural resources if we just learn how to develop them.]'
                      ,'How much do you agree with the following statements? [The balance of nature is strong enough to cope with the impacts of modern industrial nations]'
                      , 'How much do you agree with the following statements? [The so-called Тecological crisisУ facing humankind has been greatly exaggerated.]'
                      , 'How much do you agree with the following statements? [Humans were meant to rule over the rest of nature.]'
                      , 'How much do you agree with the following statements? [Humans will eventually learn enough about how nature works to be able to control it.]']:

    plt.figure(figsize=(15, 6))

    # Pie chart for Male responses
    plt.subplot(1, 2, 1)
    df_male = df1[df1['What is your biological sex?'] == 'Male']
    male_counts = df_male[question].value_counts()
    plt.pie(male_counts, labels=male_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'), pctdistance = 0.85)
    plt.text(0.5, -0.15, 'Male', horizontalalignment='center', verticalalignment='center', fontsize=12, transform=plt.gca().transAxes)

    # Pie chart for Female responses
    plt.subplot(1, 2, 2)
    df_female = df1[df1['What is your biological sex?'] == 'Female']
    female_counts = df_female[question].value_counts()
    plt.pie(female_counts, labels=female_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'), pctdistance = 0.85)
    plt.text(0.5, -0.15, 'Female', horizontalalignment='center', verticalalignment='center', fontsize=12, transform=plt.gca().transAxes)
    plt.suptitle(f' {question}', fontsize=16)

    plt.show()

plt.figure(figsize=(10, 6))

sns.set(style="whitegrid")

# Bar chart for Male responses
plt.subplot(1, 2, 1)
sns.countplot(x='How often do you do the following activities with trees? [Cut down the tree]', data=df1[df1['What is your biological sex?'] == 'Male'], palette='dark')
plt.title('Male Responses - Cutting Down Trees')
plt.xlabel('Frequency')
plt.ylabel('Count')

# Bar chart for Female responses
plt.subplot(1, 2, 2)
sns.countplot(x='How often do you do the following activities with trees? [Cut down the tree]', data=df1[df1['What is your biological sex?'] == 'Female'], palette='dark')
plt.title('Female Responses - Cutting Down Trees')
plt.xlabel('Frequency')
plt.ylabel('Count')


plt.suptitle('How often do you do the following activities with trees? [Cut down the tree]', fontsize=16)

plt.show()

import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder


# Select socio-demographic features and environmental perception variables
socio_demo_features = df1[['What is your nationality?',
       'Region: generated from A1.1', 'What is your biological sex?',
       'What is the highest educational level you have completed',
       'Do you have a pet or  a garden at home?', 'What is your age?',
       'Please specify your ethnicity.', 'What is your marital status?',
       'Employment Status: Are you currentlyЙ?']]

environmental_perception = df1[['How much do you agree with the following statements? [We are approaching the limit of the number of people the earth can support]'
                 ,'How much do you agree with the following statements? [When humans interfere with nature it often produces disastrous consequences.]'
                 , 'How much do you agree with the following statements? [Humans are seriously abusing the environment.]'
                 , 'How much do you agree with the following statements? [Plants and animals have as much right as humans to exist.]'
                 , 'How much do you agree with the following statements? [Despite our special abilities, humans are still subject to the laws of nature.]'
                 , 'How much do you agree with the following statements? [The Earth is like a spaceship with very limited room and resources.]'
                 ,'How much do you agree with the following statements? [The balance of nature is very delicate and easily upset.]'
                 , 'How much do you agree with the following statements? [If things continue on their present course, we will soon experience a major ecological catastrophe.]'
                 , 'How much do you agree with the following statements? [Humans have the right to modify the natural environment to suit their needs.]'
                      , 'How much do you agree with the following statements? [Human ingenuity will insure that we do not make the Earth unlivable]'
                      , 'How much do you agree with the following statements? [The Earth has plenty of natural resources if we just learn how to develop them.]'
                      ,'How much do you agree with the following statements? [The balance of nature is strong enough to cope with the impacts of modern industrial nations]'
                      , 'How much do you agree with the following statements? [The so-called Тecological crisisУ facing humankind has been greatly exaggerated.]'
                      , 'How much do you agree with the following statements? [Humans were meant to rule over the rest of nature.]'
                      , 'How much do you agree with the following statements? [Humans will eventually learn enough about how nature works to be able to control it.]']]


# Convert numerical environmental perception variables to classes
environmental_perception_classes = environmental_perception.astype(str)

# Data Preprocessing
# Label encode categorical variables
label_encoder = LabelEncoder()
for column in socio_demo_features.columns:
    socio_demo_features[column] = label_encoder.fit_transform(socio_demo_features[column])

# Convert each target variable to binary labels
for column in environmental_perception.columns:
    environmental_perception_classes[column] = label_encoder.fit_transform(environmental_perception_classes[column])

# Train-test split
X_train, X_temp, y_train, y_temp = train_test_split(socio_demo_features, environmental_perception_classes, test_size=0.3, random_state=42)
X_test, X_eval, y_test, y_eval = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)



# Train a Random Forest Classifier
classifier = RandomForestClassifier(random_state=42)
classifier.fit(X_train, y_train)

# Extract feature importances
feature_importances = classifier.feature_importances_

# Create a DataFrame to visualize feature importances
feature_importance_df = pd.DataFrame({'Feature': X_train.columns, 'Importance': feature_importances})

# Sort features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot feature importances
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Importance')
plt.title('Feature Importances for Environmental Perception Prediction')
plt.show()

socio_demo_features = df1[['What is your nationality?',
       'Region: generated from A1.1', 'What is your biological sex?',
       'What is the highest educational level you have completed',
       'Do you have a pet or  a garden at home?', 'What is your age?',
       'Please specify your ethnicity.', 'What is your marital status?',
       'Employment Status: Are you currentlyЙ?']]

environmental_perception = df1[['How much do you agree with the following statements? [We are approaching the limit of the number of people the earth can support]'
                 ,'How much do you agree with the following statements? [When humans interfere with nature it often produces disastrous consequences.]'
                 , 'How much do you agree with the following statements? [Humans are seriously abusing the environment.]'
                 , 'How much do you agree with the following statements? [Plants and animals have as much right as humans to exist.]'
                 , 'How much do you agree with the following statements? [Despite our special abilities, humans are still subject to the laws of nature.]'
                 , 'How much do you agree with the following statements? [The Earth is like a spaceship with very limited room and resources.]'
                 ,'How much do you agree with the following statements? [The balance of nature is very delicate and easily upset.]'
                 , 'How much do you agree with the following statements? [If things continue on their present course, we will soon experience a major ecological catastrophe.]'
                 , 'How much do you agree with the following statements? [Humans have the right to modify the natural environment to suit their needs.]'
                      , 'How much do you agree with the following statements? [Human ingenuity will insure that we do not make the Earth unlivable]'
                      , 'How much do you agree with the following statements? [The Earth has plenty of natural resources if we just learn how to develop them.]'
                      ,'How much do you agree with the following statements? [The balance of nature is strong enough to cope with the impacts of modern industrial nations]'
                      , 'How much do you agree with the following statements? [The so-called Тecological crisisУ facing humankind has been greatly exaggerated.]'
                      , 'How much do you agree with the following statements? [Humans were meant to rule over the rest of nature.]'
                      , 'How much do you agree with the following statements? [Humans will eventually learn enough about how nature works to be able to control it.]']]

columns_to_drop = ['Region: generated from A1.1','Please specify your ethnicity.']

# Create a new DataFrame without the specified columns
socio_demo_features_subset = socio_demo_features.drop(columns=columns_to_drop)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


X = socio_demo_features_subset

# Add cluster information to the features
X['cluster'] = cluster_df['cluster']

y = environmental_perception

X_encoded = pd.get_dummies(X)

# Data splitting
X_train, X_temp, y_train, y_temp = train_test_split(X_encoded, y, test_size=0.3, random_state=42)
X_test, X_eval, y_test, y_eval = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Initialize lists to store accuracies and variable names
accuracies = []
variable_names = []

# Model selection and training (KNeighborsClassifier)
knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)

# Model evaluation on the test set
y_pred_test = knn_model.predict(X_test)

# Evaluate each variable separately on the test set and store accuracies and variable names
for i in range(y_test.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the test set
    accuracy_test = accuracy_score(y_test.iloc[:, i], y_pred_test[:, i])

    variable_names.append(variable_name)
    accuracies.append(accuracy_test)

    # Print classification report for the test set
    print(f"Classification Report for {variable_name} on Test Set:\n", classification_report(y_test.iloc[:, i], y_pred_test[:, i]))
    print("\n")

    # Print accuracy for the test set
    print(f"Accuracy for {variable_name} on Test Set: {accuracy_test:.2%}")
    print("\n")

# Model evaluation on the evaluation set
y_pred_eval = knn_model.predict(X_eval)

# Evaluate each variable separately on the evaluation set and store accuracies and variable names
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the evaluation set
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])

    # Print classification report for the evaluation set
    print(f"Classification Report for {variable_name} on Evaluation Set:\n", classification_report(y_eval.iloc[:, i], y_pred_eval[:, i]))
    print("\n")

    # Print accuracy for the evaluation set
    print(f"Accuracy for {variable_name} on Evaluation Set: {accuracy_eval:.2%}")
    print("\n")

# Calculate and print the average accuracy for the test set
average_accuracy_test = np.mean(accuracies)
print(f"Average Accuracy Across All Variables on Test Set: {average_accuracy_test:.2%}")

# Create a bar plot for the test set
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.bar(variable_names, accuracies, color='orange')
plt.title('Accuracy for Each Environmental Perception Variable (K-Nearest Neighbors) - Test Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)  # Set y-axis limit to ensure accurate representation of accuracy values

# Plot for the evaluation set
plt.subplot(1, 2, 2)
accuracies_eval = []
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])
    accuracies_eval.append(accuracy_eval)
plt.bar(variable_names, accuracies_eval, color='blue')
plt.title('Accuracy for Each Environmental Perception Variable (K-Nearest Neighbors) - Evaluation Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

average_accuracy_eval = np.mean(accuracies_eval)
print(f"Average Accuracy Across All Variables on Evaluation Set: {average_accuracy_eval:.2%}")

plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import numpy as np


X = socio_demo_features_subset

# Add cluster information to the features
X['cluster'] = cluster_df['cluster']

y = environmental_perception

X_encoded = pd.get_dummies(X)

# Data splitting
X_train, X_temp, y_train, y_temp = train_test_split(X_encoded, y, test_size=0.3, random_state=42)
X_test, X_eval, y_test, y_eval = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Initialize lists to store accuracies and variable names
accuracies = []
variable_names = []

# Model selection and training (DecisionTreeClassifier)
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Model evaluation on the test set
y_pred_test = dt_model.predict(X_test)

# Evaluate each variable separately on the test set and store accuracies and variable names
for i in range(y_test.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the test set
    accuracy_test = accuracy_score(y_test.iloc[:, i], y_pred_test[:, i])

    variable_names.append(variable_name)
    accuracies.append(accuracy_test)

    # Print classification report for the test set
    print(f"Classification Report for {variable_name} on Test Set:\n", classification_report(y_test.iloc[:, i], y_pred_test[:, i]))
    print("\n")

    # Print accuracy for the test set
    print(f"Accuracy for {variable_name} on Test Set: {accuracy_test:.2%}")
    print("\n")

# Model evaluation on the evaluation set
y_pred_eval = dt_model.predict(X_eval)

# Evaluate each variable separately on the evaluation set and store accuracies and variable names
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the evaluation set
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])

    # Print classification report for the evaluation set
    print(f"Classification Report for {variable_name} on Evaluation Set:\n", classification_report(y_eval.iloc[:, i], y_pred_eval[:, i]))
    print("\n")

    # Print accuracy for the evaluation set
    print(f"Accuracy for {variable_name} on Evaluation Set: {accuracy_eval:.2%}")
    print("\n")

# Calculate and print the average accuracy for the test set
average_accuracy_test = np.mean(accuracies)
print(f"Average Accuracy Across All Variables on Test Set: {average_accuracy_test:.2%}")

# Create a bar plot for the test set
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.bar(variable_names, accuracies, color='orange')
plt.title('Accuracy for Each Environmental Perception Variable (Decision Tree) - Test Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

# Plot for the evaluation set
plt.subplot(1, 2, 2)
accuracies_eval = []
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])
    accuracies_eval.append(accuracy_eval)
plt.bar(variable_names, accuracies_eval, color='blue')
plt.title('Accuracy for Each Environmental Perception Variable (Decision Tree) - Evaluation Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

average_accuracy_eval = np.mean(accuracies_eval)
print(f"Average Accuracy Across All Variables on Evaluation Set: {average_accuracy_eval:.2%}")

plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import numpy as np

X = socio_demo_features_subset

# Add cluster information to the features
X['cluster'] = cluster_df['cluster']

y = environmental_perception

X_encoded = pd.get_dummies(X)

# Data splitting
X_train, X_temp, y_train, y_temp = train_test_split(X_encoded, y, test_size=0.3, random_state=42)
X_test, X_eval, y_test, y_eval = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Initialize lists to store accuracies and variable names
accuracies = []
variable_names = []

# Model selection and training (RandomForestClassifier)
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Model evaluation on the test set
y_pred_test = rf_model.predict(X_test)

# Evaluate each variable separately on the test set and store accuracies and variable names
for i in range(y_test.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the test set
    accuracy_test = accuracy_score(y_test.iloc[:, i], y_pred_test[:, i])

    variable_names.append(variable_name)
    accuracies.append(accuracy_test)

    # Print classification report for the test set
    print(f"Classification Report for {variable_name} on Test Set:\n", classification_report(y_test.iloc[:, i], y_pred_test[:, i]))
    print("\n")

    # Print accuracy for the test set
    print(f"Accuracy for {variable_name} on Test Set: {accuracy_test:.2%}")
    print("\n")

# Model evaluation on the evaluation set
y_pred_eval = rf_model.predict(X_eval)

# Evaluate each variable separately on the evaluation set and store accuracies and variable names
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the evaluation set
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])

    # Print classification report for the evaluation set
    print(f"Classification Report for {variable_name} on Evaluation Set:\n", classification_report(y_eval.iloc[:, i], y_pred_eval[:, i]))
    print("\n")

    # Print accuracy for the evaluation set
    print(f"Accuracy for {variable_name} on Evaluation Set: {accuracy_eval:.2%}")
    print("\n")

# Calculate and print the average accuracy for the test set
average_accuracy_test = np.mean(accuracies)
print(f"Average Accuracy Across All Variables on Test Set: {average_accuracy_test:.2%}")

#bar plot for the test set
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.bar(variable_names, accuracies, color='orange')
plt.title('Accuracy for Each Environmental Perception Variable (Random Forest) - Test Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

# Plot for the evaluation set
plt.subplot(1, 2, 2)
accuracies_eval = []
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])
    accuracies_eval.append(accuracy_eval)
plt.bar(variable_names, accuracies_eval, color='blue')
plt.title('Accuracy for Each Environmental Perception Variable (Random Forest) - Evaluation Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

average_accuracy_eval = np.mean(accuracies_eval)
print(f"Average Accuracy Across All Variables on Evaluation Set: {average_accuracy_eval:.2%}")

plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import numpy as np


X = socio_demo_features_subset

y = environmental_perception

X_encoded = pd.get_dummies(X)

# Data splitting
X_train, X_temp, y_train, y_temp = train_test_split(X_encoded, y, test_size=0.3, random_state=42)
X_test, X_eval, y_test, y_eval = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Initialize lists to store accuracies and variable names
accuracies = []
variable_names = []

# Model selection and training (MultiOutputClassifier with Logistic Regression)
logreg_model = MultiOutputClassifier(LogisticRegression(random_state=42))
logreg_model.fit(X_train, y_train)

# Model evaluation on the test set
y_pred_test = logreg_model.predict(X_test)

# Evaluate each variable separately on the test set and store accuracies and variable names
for i in range(y_test.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the test set
    accuracy_test = accuracy_score(y_test.iloc[:, i], y_pred_test[:, i])

    variable_names.append(variable_name)
    accuracies.append(accuracy_test)

    # Print classification report for the test set
    print(f"Classification Report for {variable_name} on Test Set:\n", classification_report(y_test.iloc[:, i], y_pred_test[:, i]))
    print("\n")

    # Print accuracy for the test set
    print(f"Accuracy for {variable_name} on Test Set: {accuracy_test:.2%}")
    print("\n")

# Model evaluation on the evaluation set
y_pred_eval = logreg_model.predict(X_eval)

# Evaluate each variable separately on the evaluation set and store accuracies and variable names
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"

    # Calculate accuracy for each target variable on the evaluation set
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])

    # Print classification report for the evaluation set
    print(f"Classification Report for {variable_name} on Evaluation Set:\n", classification_report(y_eval.iloc[:, i], y_pred_eval[:, i]))
    print("\n")

    # Print accuracy for the evaluation set
    print(f"Accuracy for {variable_name} on Evaluation Set: {accuracy_eval:.2%}")
    print("\n")

# Calculate and print the average accuracy for the test set
average_accuracy_test = np.mean(accuracies)
print(f"Average Accuracy Across All Variables on Test Set: {average_accuracy_test:.2%}")

#Bar plot for the test set
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.bar(variable_names, accuracies, color='orange')
plt.title('Accuracy for Each Environmental Perception Variable (Logistic Regression) - Test Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

# Plot for the evaluation set
plt.subplot(1, 2, 2)
accuracies_eval = []
for i in range(y_eval.shape[1]):
    variable_name = f"EP{i+1}"
    accuracy_eval = accuracy_score(y_eval.iloc[:, i], y_pred_eval[:, i])
    accuracies_eval.append(accuracy_eval)
plt.bar(variable_names, accuracies_eval, color='blue')
plt.title('Accuracy for Each Environmental Perception Variable (Logistic Regression) - Evaluation Set')
plt.xlabel('Environmental Perception Variable')
plt.ylabel('Accuracy')
plt.ylim(0, 1)
average_accuracy_eval = np.mean(accuracies_eval)
print(f"Average Accuracy Across All Variables on Evaluation Set: {average_accuracy_eval:.2%}")

plt.tight_layout()
plt.show()

